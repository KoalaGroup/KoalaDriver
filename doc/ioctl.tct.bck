Vier (sub)devices pro Interface:
ctrl    (die PCI-Karte und der Registerbereich des Cratecontrollers)
dsp     (der DSP)
ram     (der RAM)
remote  (der Bus, der vom Controller verwaltet wird)

Die Subdevices verhalten sich bei fast allen IOCTLs identisch.
Ausnahmen:
SIS1100_CTRL_READ, SIS1100_CTRL_WRITE
    ctrl: liest oder schreibt Daten der PCI-Karte oder des Cratecontrollers
    *   : liest oder schreibt Daten des Cratecontrollers
SIS1100_CTRL_READ_BLOCK, SIS1100_CTRL_READ_BLOCK
    ctrl: liest oder schreibt Daten der PCI-Karte oder des Cratecontrollers
    *   : liest oder schreibt Daten des Cratecontrollers
    (noch nicht komplett implementiert, vermutlich nutzlos)
SIS1100_DEVTYPE
    liefert den Index des jeweiligen Subdevices (enum sis1100_subdev)
SIS3100_TIMEOUTS
SIS3100_VME_PROBE
    ist nur fuer 'remote' und VME erlaubt
SIS1100_MAPSIZE
    liefert die Groesse des mapbaren Speicherbereichs fuer das jeweilige
    Subdevice (dsp kann nicht gemapped werden, ram habe ich vermutlich nie
    getestet oder gar verwendet)

read und write:
ctrl:
    kann fuer Interruptbehandlung benutzt werden:
    read: liest IRQ-Daten wie in struct sis1100_irq_ctl oder sis1100_irq_ctl2
    write: schreibt ein struct sis1100_irq_ack
dsp:
    geht nicht
ram:
    Liest und schreibt Daten im RAM
remote:
    Liest und schreibt Daten im angeschlossenen Bus
    Addressmodifier und Wortlaenge werden mit SIS1100_SETVMESPACE
    festgelegt


IOCTLs:

Fehlermoeglichkeiten:
Ein ioctl liefert entweder 0 oder -1 als Returnwert.
-1 bedeutet Fehler, der Fehlercode steht in errno. Es werden keine 
gueltigen Daten zurueckgeliefert.
Uebliche Fehler sind:
EINVAL Ein ungueltiger Wert wurde uebergeben.
EFAULT ein Pointer (entweder die Adresse der dem IOCTL uebergebenen Struktur
       oder ein Pointer innerhalb dieser) zeigt auf einen Speicherbereich, der
       dem Userprogramm nicht gehoert.
ENOTTY Der Code des IOCTL ist ungueltig (sollte nicht passieren).
ENXIO  der VME-Controller ist nicht angeschlossen oder ausgeschaltet
EIO    Ein Zugriff auf den VME-Controller oder den VME-Bus schlug fehl.
ENOMEM Fuer die Zwischenspeicherung von Werten konnte nicht genug Speicher
       beschafft werden.
Haeufig schreibt der Treiber in diesen Faellen Debuginformationen in das
Kernellog.


Der Datenblock mancher IOCTLs enthaelt ein Feld 'error'.
Moegliche Werte (fuer VME):
0x000: kein Fehler
0x005: deadlock (only transient)
0x101: missing synchronisation
0x102: inhibit
0x103: output fifo full
0x104: buffer full
0x105: deadlock; transfer aborted
0x107: timeout
0x211: VME bus error
0x212: VME retry
0x214: arbitration timeout
0x301: DMA interrupted
0x302: synchronisation lost during DMA
0x303 == 0x301|0x302

Hinter den Namen der IOCTLs steht ein Kuerzel _IOW, _IOR, _IOWR oder _IO.
Damit wird gekennzeichnet, in welche Richtung die Daten in der dem IOCTL
uebergeben Struktur transportiert werden.
_IOW : nur Transport vom Userprogramm zum Treiber
_IOR : nur Transport vom Treiber zum Userprogramm
_IOWR: Transport in beide Richtungen
_IO  : kein Datentransport, das dritte Argument von ioctl wird ignoriert


SIS1100_SETVMESPACE     _IOW
struct vmespace {
    int32_t am;        /* address modifier, -1 if not used */
    u_int32_t datasize;/* wordsize (1, 2 or 4 byte) */
    int swap;          /* 1: swap words 0: don't swap -1: not changed */
    int mapit;         /* not used */
    ssize_t mindmalen; /* 0: never use DMA; 1: always use DMA
                          2...: use DMA if at least mindmalen bytes are
                          to be read or written
                         -1: do not change old value */
};
Setzt Defaults, die von read, write und VME_PROBE benutzt werden.
VME_BLOCK_READ und VME_BLOCK_WRITE benutzen nur mindmalen.
Errors: EINVAL wenn wordsize nicht 1, 2 oder 4 ist


SIS3100_VME_PROBE       _IOW
u_int32_t
Versucht, ein Wort von der angegebenen Adresse zu lesen. Kann (manchmal)
benutzt werden, um die Existenz von Hardware an dieser Adresse zu pruefen.
Das gelesene Wort wird ignoriert.
Errors: EIO wenn Lesen nicht moeglich ist


SIS3100_VME_READ        _IOWR
struct sis1100_vme_req {
    int size;         /* size of data word (1, 2 or 4 byte) */
    int32_t am;       /* address modifier or -1 */
    u_int32_t addr;   /* address */
    u_int32_t data;   /* data word */
    u_int32_t error;
};
Liest ein Datenwort vom VME-Bus.
Errors:
    ioctl selber liefert -1 und ENXIO wenn der VME-Controller nicht erreichbar
    ist. Die Werte in sis1100_vme_req sind dann ungueltig.
    Andernfalls ist der Wert in sis1100_vme_req.error massgeblich. Nur wenn er
    0 ist (kein Fehler), ist der Wert in sis1100_vme_req.data gueltig.


SIS3100_VME_WRITE       _IOWR
Aehnlich wie SIS3100_VME_READ


SIS3100_VME_BLOCK_READ  _IOWR
struct sis1100_vme_block_req {
    int size;        /* size of data word  (1, 2 or 4 byte) */
    int fifo;        /* don't increment address */
    size_t num;      /* number of datawords */
    int32_t am;      /* address modifier or -1 */
    u_int32_t addr;  /* remote bus address */
    u_int8_t* data;  /* local user space address */
    u_int32_t error;
};
Liest einen Datenblock vom VME-Bus.
data zeigt auf den Speicherbereich wo die Daten hinsollen.
num sagt, wieviele Datenworte gelesen werden sollen. Nach dem Aufruf sagt
num, wieviele Worte tatsaechlich gelesen wurden.
Die Bezeichnung 'VME_BLOCK_READ' ist irrefuehrend. Es geht hier nicht um
Blockread im VME-Sinne, sondern um Bloecke von Daten, die per DMA von
aufeinanderfolgenden Adressen gelesen werden koennen.
Ob ein VME-Modul das tatsaechlich als Blockread sieht, haengt nur vom
Adrssmodifier ab.
Errors:
    Ein 0x211 (bus error) in error ist kein richtiger Fehler, es sagt nur,
    dass weniger Worte als verlangt gelesen wurden.
    Alle anderen Werte (ausser 0) bedeuten wikliche Fehler.


SIS3100_VME_BLOCK_WRITE _IOWR
Aehnlich wie SIS3100_VME_BLOCK_READ


SIS1100_CTRL_READ       _IOWR
struct sis1100_ctrl_reg {
    int offset;      /* Adresse des Registers (in Byte) */
    u_int32_t val;   /* gelesener Wert */
    u_int32_t error;
};
Liest ein Wort aus dem Registerbereich des VME-Controllers oder der PCI-Karte.
Das Verhalten haengt von dem benutzten Subdevice ab.
Subdevice ctrl:
    Adressen 0..0x7ff betreffen die PCI-Karte.
    Adressen 0x800..0xfff betreffen den VME-Controller.
    Hier wird so getan, als ob alle Register lokal sind, eine Fehlerbehandlung
    gibt es nicht, error ist immer 0.
Andere Subdevices:
    Adressen 0..0x7ff betreffen den VME-Controller.
    Es gibt eine Fehlerbehandlung, error wird vernuenftig gesetzt.


SIS1100_CTRL_WRITE      _IOWR
Aehnlich wie SIS1100_CTRL_READ


SIS1100_PIPE            _IOWR
struct sis1100_pipe {
    int num;                       /* Anzahl der Elemente von list */
    struct sis1100_pipelist* list;
    u_int32_t* data;               /* Hier kommen gelesene Daten hin */
    u_int32_t error;
};
struct sis1100_pipelist {
    u_int32_t head; /* masked with 0xff3f0400:                  */
    	    	    /* only 'be', remote space and w/r are used */
    int32_t am;
    u_int32_t addr;
    u_int32_t data; /* only used for write access */
};
Liest Daten vom oder schreibt Daten zum VME-Bus im Pipelinemodus. Es wird also
nicht bei jedem Wort auf das Handshake gewartet, sondern erst am Ende der 
Pipiline. Damit ist diese Methode sehr viel schneller als Einzelaufrufe, auch
wenn die Daten nicht an aufeinanderfolgenden Adressen stehen und damit
VME_BLOCK_READ/WRITE nicht verwendet werden koennen.
sis1100_pipe enthaelt einen Pointer auf eine Liste von zu lesenden oder
zu schreibenden Werten. num ist die Anzahl der Elemente dieser Liste.
data ist das Ziel fuer zu lesende Daten, zu schreibende Daten stehen direkt in
der Liste.
Wenn error != 0 ist, ist unbekannt, bei welcher Operation der Fehler aufgetreten
ist.
sis1100_pipelist ist bis auf head selbsterklaerend.
head=((be&0x)<<)|((space&0x)<<)|((rw&0x)<<)
be: Bitmask, die die Wortlaenge beschreibt: 0x1 1 Byte, 0x3 2 Byte, 0xf 4 Byte
space: 1: VME (oder CAMAC), 6: RAM und DSP
rw: 0: read, 1: write


SIS1100_MAPSIZE         _IOR
u_int32_t
Gibt fuer jedes Subdevice die Groesse des Bereiches an, der mit mmap
gemapped werden kann.


SIS1100_LAST_ERROR      _IOR
u_int32_t
Gibt den letzten Protokollfehler zurueck. (Nur fuer Menschen, die
verrueckte Dinge tun.)


SIS1100_IDENT           _IOR
struct sis1100_ident {
    struct sis1100_ident_dev local;
    struct sis1100_ident_dev remote;
    int remote_ok;
    int remote_online;
};
struct sis1100_ident_dev {
    enum sis1100_hw_type hw_type;
    int hw_version;
    int fw_type;
    int fw_version;
};
Gibt die Versionen der PCI-Karte und (wenn moeglich) des VME-Controllers
zurueck.
remote_ok ist 1, wenn die Version des VME-Controllers bekannt ist (auch, wenn
er ausgeschaltet wurde).
remote_online ist 1, wenn der VME-Controllers online ist.


SIS1100_FIFOMODE        _IOWR
int
Setzt den FIFO-Mode fuer read und write (nicht fuer IOCTLs).
FIFO-Mode ist aus Kompatibilitaetsgruenden nicht in SETVMESPACE enthalten,
gehoert aber logisch dorthin.
Im FIFO-Mode bleibt die Adresse, die der Controller auf den Bus sendet
konstant, auch wenn der Transfer unterbrochen wurde. Das hat nur Sinn,
wenn der VME-Slave dafuer eingerichtet ist.


SIS1100_IRQ_CTL         _IOW
struct sis1100_irq_ctl {
    u_int32_t irq_mask;
    int32_t   signal;  /* >0: signal; ==0: disable; <0: no signal but select */
};
Hiermit wird ein Interrupt 'bestellt'. Ein Interrupt kann vom VME-Slaves,
vom VME-Controller oder von der PCI-Karte ausgeloest werden.
In sis1100_var.h gibt es Definitionen fuer die Bits in irq_mask
(SIS3100_VME_IRQS und folgende).
signal legt fest, was mit dem Interrupt geschehen soll:
0: Interrupt wird disabled.
>0: Das angegebene Signal wird and den Prozess gesendet.
<0: Es wird kein Signal gesendet, es kann aber mit select oder SIS1100_IRQ_WAIT
darauf gewartet werden.


SIS1100_IRQ_CTL2        _IOW
struct sis1100_irq_ctl2 {
    u_int32_t irq_mask;
    int32_t   signal;  /* >0: signal; ==0: disable; <0: no signal but select */
    u_int32_t auto_mask; /* these IRQs are automatically reenabled */
    u_int32_t flags;     /* see below */
#define SIS1100_IRQCTL_NOCLEAR 0x1 /* don't clear pending IRQs */
};
Wie SIS1100_IRQ_CTL, aber mit zusaetzlichen Moeglichkeiten.
In auto_mask kann mit einem gesetzten Bit festgelegt werden, dass ein
Interrupt kein IRQ_ACK braucht.
flags enthaelt momentan nur ein Bit, es bewirkt, dass ein vor bereits
aktivierter Interrupt nicht geloescht sondern sofort ausgeliefert wird.
Das ist nuetzlich wenn man Interrupts vorruebergehend nicht behandeln
moechte, sie aber nicht verlorengehen sollen. (Funktioniert vermutlich nur
mit LVDS-Controllern)


SIS1100_IRQ_GET         _IOWR
struct sis1100_irq_get {
    u_int32_t irq_mask;      /* IRQs for which information is requested */
    int32_t   remote_status; /* -1: down 1: up 0: unchanged */
    u_int32_t opt_status;    /* content of opt. status register of sis1100 */
    u_int32_t mbx0;          /* content of mailbox 0 of PLX */
    u_int32_t irqs;          /* pending IRQs */
    int32_t   level;         /* highest level of pendig VME IRQs */
    int32_t   vector;        /* corresponding IRQ vector */
};
Es wird Information ueber ein oder mehrere Interupts geliefert.
In irq_mask wird festgelegt, an welchen Interrupts man interessiert ist.
Ein- und Ausschalten des VME-Controllers liefert auch einen Interrupt.
Dieser kann nicht maskiert oder disabled werden, er wird immer in remote_status
geliefert.
opt_status und mbx0 waren fuer Debugzwecke bestimmt und sind uninteressant.
In irqs wird das Bitmuster der 'pending IRQs' geliefert (unabhaengig von
irq_mask).
In level wird das hoechste IRQ-Level fuer VME-Interrupts geliefert (abhaengig 
von irq_mask).
In vector steht der zugehoerige Interruptvektor.


SIS1100_IRQ_GET2        _IOWR
struct sis1100_irq_get2 {
    u_int32_t irq_mask;
    int32_t   remote_status; /* -1: down 1: up 0: unchanged */
    u_int32_t opt_status;
    u_int32_t mbx0;
    u_int32_t irqs;
    int32_t level;
    int32_t vector;
    u_int32_t irq_sec;  /* time of last Interrupt (seconds)     */
    u_int32_t irq_nsec; /*                        (nanoseconds) */
};
Wie SIS1100_IRQ_GET, aber zusaetzlich ist der Zeitpunkt des VME-Interrupts
verfuegbar.


SIS1100_IRQ_ACK         _IOW
struct sis1100_irq_ack {
    u_int32_t irq_mask;
};
Bestaetigt, dass die Interrupts in irq_mask behandelt wurden und aktiviert sie
wieder.


SIS1100_IRQ_WAIT        _IOWR
SIS1100_IRQ_WAIT2       _IOWR
Wie SIS1100_IRQ_GET und SIS1100_IRQ_GET2, wartet aber, bis tatsaechlich ein
Interrupt aufgetreten ist.


SIS1100_MINDMALEN       _IOWR
int[2]
Wie der mindmalen in SIS1100_SETVMESPACE, aber fuer read und write getrennt.
int[0]: read
int[1]: write


SIS1100_FRONT_IO        _IOWR
u_int32_t
Aendert den Status der Font-IOs von PCI-Karte und VME-Controller und gibt
den aktuellen Status zurueck. Die Zuordnung der Bits ist in
sis3100rem_front_io.c definiert.


SIS1100_FRONT_PULSE     _IOW
Wie SIS1100_FRONT_IO, erzeugt aber nur kurze Pulse an den Ausgaengen.

SIS1100_FRONT_LATCH     _IOWR
Wie SIS1100_FRONT_IO, liefert aber den Status des Latch-Registers.


SIS3100_VME_SUPER_BLOCK_READ _IOWR
struct sis1100_vme_super_block_req {
    int n;                              /* number of elements in reqs */
    int error;
    struct sis1100_vme_block_req* reqs;
};
struct sis1100_vme_block_req {
    int size;        /* size of dataword */
    int fifo;
    size_t num;      /* number of datawords */
    int32_t am;
    u_int32_t addr;  /* remote bus address */
    u_int8_t* data;  /* local user space address */
    u_int32_t error;
};
Wirkt wie mehrere aufeinanderfolgende Aufrufe von SIS3100_VME_BLOCK_READ


SIS1100_WRITE_PIPE      _IOWR
struct sis1100_writepipe {
    int num;         /* number of addr, data pairs in data */
    int am;
    u_int32_t* data; /* num*{addr, data} */
    u_int32_t error;
};
Das ist eine eine vereinfachte Variante von SIS1100_PIPE, die nur schreiben
kann.


SIS5100_CCCZ            _IO
Loest ein CAMAC ZERO aus.


SIS5100_CCCC            _IO
Loest ein CAMAC CLEAR aus.


SIS5100_CCCI            _IOW
Setzt CAMAC Inhibit auf den angegebenen Wert.


SIS5100_CNAF            _IOWR
struct sis1100_camac_req {
    u_int32_t N;
    u_int32_t A;
    u_int32_t F;
    u_int32_t data;
    u_int32_t error;
};
Loest einen CAMAC-Transfer aus.


SIS1100_SWAP            _IOWR
int
Das gleiche wie swap in SIS1100_SETVMESPACE


SIS3100_TIMEOUTS        _IOWR
int[2]
Setzt VME-Timeouts:
int[0]: bus error timeout in ns
int[1]: arbitration timeout in ms
Die Hardware kann nur wenige diskrete Werte realisieren. Es wird immer der
naechst groessere moegliche Wert eingestellt.
Die vorher aktuell eingestellten Werte werden zurueckgeliefert.


SIS1100_DSP_LOAD        _IOW
SIS1100_DSP_RESET       _IO
SIS1100_DSP_START       _IO
SIS1100_DSP_READ        _IOWR
SIS1100_DSP_WR          _IOW
SIS1100_DSP_RD          _IOWR
Diese IOCTLs dienen der Behandlung des DSP. Vielleicht werde sie spaeter
erklaeren. (Das ist so alt, ich weiss selber nicht mehr wie das geht.)


SIS1100_DEMAND_DMA_MAP   _IOW
SIS1100_DEMAND_DMA_START _IO
SIS1100_DEMAND_DMA_STOP  _IOR
SIS1100_DEMAND_DMA_MARK  _IOW
SIS1100_DEMAND_DMA_WAIT  _IOWR
SIS3100_VME_WRITE_BLIND  _IOWR
Diese IOCTLs sind nur fuer das ZEL-LVDS-System brauchbar.


SIS1100_SERIAL_NO        _IOR
u_int32_t[4]
Liefert die Seriennummern der PCI-Karte und des optischen Piggyback
(falls sie im EPROM enthalten sind).
u_int32_t[0] Typ der Basiskarte 
u_int32_t[1] Seriennummer der Basiskarte
u_int32_t[2] Seriennummer des Piggyback
u_int32_t[3] unbenutzt


SIS1100_MINPIPELEN       _IOWR
Ist noch nicht komplett implementiert.


SIS1100_CTRL_READ_BLOCK  _IOWR
SIS1100_CTRL_WRITE_BLOCK _IOWR
Ist noch nicht komplett implementiert.


SIS1100_RESET           _IO
Resetted die PCI-Karte (aber nicht den VME-Controller)


SIS1100_REMOTE_RESET    _IO
Initialisiert den VME-Controller (oderwas immer am anderen Ende des
Lichtwellenleiters angeschlossen ist)


SIS1100_DEVTYPE         _IOR
enum sis1100_subdev
Gibt den Typ des Subdevices zurueck. Damit kann man eine Openprocedure bauen,
die ohne Ruecksicht auf die Namen der Devicefiles die Devices aufmacht und
erst spaeter den einzelnen Typen zuordnet.


SIS1100_DRIVERVERSION   _IOR
int
Gibt die Version des Treibers zurueck.


SIS1100_READ_EEPROM     _IOW
SIS1100_WRITE_EEPROM    _IOW
SIS1100_EEPROM_SIZE     _IOR
Zum Lesen und Schreiben des Inhalts des PLX-EEPROMS. Dazu existiert ein
Hilfsprogramm.
(Nicht ungefaehrlich. Bei Fehlern gibt es keinen zweiten Versuch.)


SIS1100_JTAG_ENABLE     _IOW
SIS1100_JTAG_CTRL       _IOWR
SIS1100_JTAG_DATA       _IOR
SIS1100_JTAG_PUT        _IOW
SIS1100_JTAG_GET        _IOR
Noch gefaehrlicher als SIS1100_WRITE_EEPROM und funktioniert im Moment auch
nicht.


SIS1100_PLX_READ        _IOWR
struct sis1100_ctrl_reg {
    int offset;
    u_int32_t val;
    u_int32_t error;
};
Liest ein Wort aus dem Registerspace des PLX-Chips.
error ist immer 0.

SIS1100_PLX_WRITE       _IOWR
struct sis1100_ctrl_reg {
    int offset;
    u_int32_t val;
    u_int32_t error;
};
Schreibt ein Wort in den Registerspace des PLX-Chips.
error ist immer 0.


SIS1100_TESTFLAGS       _IOWR
SIS1100_TESTACTION      _IOWR
SIS1100_TRANSPARENT     _IOWR
Temporaer benutzte Debugmechanismen. Koennen beliebig missbraucht werden,
aber bitte wirklich nur zum Debuggen.

