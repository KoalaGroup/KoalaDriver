/* $ZEL$ */

#define _GNU_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <time.h>
#include <dirent.h>
#include <limits.h>
#include <libgen.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <sys/mman.h>

#include <sis1100_var.h>
#include <sis1100_map.h>

#define SWAP_BYTES(x) \
    ((((x)>>24)&0x000000ff)| \
    (((x)>>8)&0x0000ff00)| \
    (((x)<<8)&0x00ff0000)| \
    (((x)<<24)&0xff000000))

#define SWAP_SHORT(x) \
    ((((x)>>16)&0x0000ffff)| \
    (((x)<<16)&0xffff0000))

/* start address of VME RAM (MVME162-222) */
static const u_int32_t start=0x00400000;
static const int maxdumpwords=0x20;
static const int block_am=0xb;
static const int single_am=0x9;
static const u_int32_t pattern[]={0x01234567, 0x89abcdef};
static u_int32_t *block_r=0; /* read data */
static u_int32_t *blocksr=0; /* simulated read for verify */
static u_int32_t *block_w=0; /* data to be written */
static u_int32_t *blockXX=0; /* known garbage */

enum transtype {
    trans_start,
    trans_mmap,
    trans_block_single,
    trans_block_dma,
    trans_block_pipe,
    trans_pipe,
    trans_wpipe,
    trans_end
};

struct quest {
    int sequence;
    int size;
    int cpushift;
    int vmeshift;
    enum transtype transtype;
    int fifo;
    int rw;
    double time;
};

struct pathdescr {
    int rp, cp;
    struct sis1100_reg *cmap;
    void *map;
    size_t mapsize;
};

static int check, shift, berr, controller, loops;
static int quest_id=-1;
static int numwords=0x10;
static int increment=0;
static u_int32_t testflags;
static int do_swap;
static int printall;
static int write_marker;
static const char *dev;
static char *base;

static char *boardtypes[]= {
    "5V",
    "3.3V",
    "universal",
    "PCIe+OPT",
    "PCIe single link",
    "PCIe quad link",
};
static char *hwtypes[]= {
    "invalid",
    "pci",
    "vme",
    "camac",
    "lvd",
    "pandapixel",
    "psf4ad",
};
static char *transtypes[]= {
    "start",
    "mmap",
    "block_single",
    "block_dma",
    "block_pipe",
    "pipe",
    "wpipe",
    "end",
};

/*****************************************************************************/
static void
usage(char* argv0)
{
    printf("usage: %s [-c] [-b] [-w] [-l num] [-t flags] [-h] device)\n", argv0);
    printf("       -c: don't check data\n");
    printf("       -x: don't write marker\n");
    printf("       -b: force bus error\n");
    printf("       -w: force little endian\n");
    printf("       -m0: disable system controller (16 MHz VME clock)\n");
    printf("       -m1: enable system controller\n");
    printf("            default depends on jumper settings\n");
    printf("       -s: shift areas\n");
    printf("       -l: number of loops (0: infinite)\n");
    printf("       -n: number of words to be transferred\n");
    printf("       -q: ID of quest\n");
    printf("       -t: testflags\n");
    printf("       -v: print all data of a mismatching transfer\n");
    printf("       -h: this text\n");
    printf("       device: /dev/sis1100_xx\n");
}
/*****************************************************************************/
static int
readargs(int argc, char* argv[])
{
    int c, errflg=0;

    check=1;
    berr=0;
    do_swap=0;
    controller=-1;
    shift=0;
    loops=1;
    testflags=0;
    printall=0;
    write_marker=1;

    while (!errflg && ((c=getopt(argc, argv, "cbwm:sl:n:i:q:t:vh"))!=-1)) {
        switch (c) {
        case 'c':
            check=0;
            break;
        case 'x':
            write_marker=0;
            break;
        case 'b':
            berr=1;
            break;
        case 'w':
            do_swap=1;
            break;
        case 'm':
            controller=atoi(optarg);
            break;
        case 's':
            shift=1;
            break;
        case 'l':
            loops=atoi(optarg);
            break;
        case 'n':
            numwords=atoi(optarg);
            break;
        case 'i':
            increment=atoi(optarg);
            break;
        case 'q':
            quest_id=atoi(optarg);
            break;
        case 't':
            testflags=atoi(optarg);
            break;
        case 'v':
            printall=1;
            break;
        case 'h':
        default:
            errflg=1;
        }
    }

    if (errflg || argc-optind!=1) {
        usage(argv[0]);
        return -1;
    }

    dev=argv[optind];

    return 0;
}
/*****************************************************************************/
static int
initblocks(void)
{
    u_int32_t val;
    int i;

    free(block_r);
    free(blocksr);
    free(block_w);
    free(blockXX);
    block_r=(u_int32_t*)calloc(2, numwords*4);
    blocksr=(u_int32_t*)calloc(2, numwords*4);
    block_w=(u_int32_t*)calloc(2, numwords*4);
    blockXX=(u_int32_t*)calloc(2, numwords*4);
    if (!block_r || !blocksr || !block_w || !blockXX) {
        printf("malloc 4*%d words: %s\n", 2*numwords, strerror(errno));
        return -1;
    }

#if 0
    printf("block_r=%p\n", block_r);
    printf("blocksr=%p\n", blocksr);
    printf("block_w=%p\n", block_w);
    printf("blockXX=%p\n", blockXX);
#endif

    for (i=0; i<2*numwords; i+=2) {
        block_w[i+0]=pattern[0];
        block_w[i+1]=pattern[1];
    }

    val=0x00010203;
    for (i=0; i<2*numwords; i++) {
        blockXX[i]=val+i*0x10101010;
    }
    return 0;
}
/*****************************************************************************/
static int
filter(const struct dirent *dirent)
{
    return !strncmp(dirent->d_name, base, strlen(base));
}
/*****************************************************************************/
static int
do_open(struct pathdescr *d, const char *name)
{
    struct dirent **dirents;
    char *bcopy, *dcopy;
    char *dir; /* 'base' is needed by 'filter', therefore in global scope */
    char path[PATH_MAX];
    int num, i;

    d->rp=d->cp=-1;
    d->map=d->cmap=0;
    d->mapsize=0;

    /* copy name because dirname and basename may modify there arguments */
    bcopy=strdup(name);
    dcopy=strdup(name);

    /* decompose name */
    base=basename(bcopy);
    dir=dirname(dcopy);
    
    /* scan directory */
    num=scandir(dir, &dirents, filter, alphasort);
    if (num<0) {
        printf("scandir \"%s\": %s\n", base, strerror(errno));
        return -1;
    }

    /* try to open the sis devices */
    for (i=0; i<num; i++) {
        enum sis1100_subdev subdev;
        int p;

        snprintf(path, PATH_MAX-1, "%s/%s", dir, dirents[i]->d_name);
        if ((p=open(path, O_RDWR, 0))<0) {
            printf("open(\"%s\"): %s\n", path, strerror(errno));
            continue;
        }
        if (ioctl(p, SIS1100_DEVTYPE, &subdev)<0) {
            printf("SIS1100_DEVTYPE(%s): %s\n", path, strerror(errno));
            close(p);
            continue;
        }
        if (subdev==sis1100_subdev_remote)
            d->rp=p;
        else if (subdev==sis1100_subdev_ctrl)
            d->cp=p;
        else
            close(p);
    }

    if (d->rp<0) {
        printf("'remote' path not found\n");
        return -1;
    }
    if (d->cp<0) {
        printf("'ctrl' path not found\n");
        return -1;
    }

    for (i=0; i<num; i++)
        free(dirents[i]);
    free(dirents);

    free(bcopy);
    free(dcopy);

    return 0;
}
/*****************************************************************************/
static int
do_ident(struct pathdescr *d)
{
    struct sis1100_ident ident;
    u_int32_t ser[4];

    if (ioctl(d->rp, SIS1100_IDENT, &ident)<0) {
	printf("ioctl(SIS1100_IDENT): %s\n", strerror(errno));
	return -1;
    }
    if (ioctl(d->rp, SIS1100_SERIAL_NO, ser)<0) {
	printf("ioctl(SIS1100_SERIAL_NO): %s\n", strerror(errno));
	return -1;
    }

    printf("local part:\n");
    printf("  hw_type   : %d\n", ident.local.hw_type);
    printf("  hw_version: %d\n", ident.local.hw_version);
    printf("  fw_type   : %d\n", ident.local.fw_type);
    printf("  fw_version: %d\n", ident.local.fw_version);
    printf("  board type: %d, ", ser[0]);
    if (ser[0]<sizeof(boardtypes)/sizeof(char*))
        printf("%s\n", boardtypes[ser[0]]);
    else
        printf("(unknown)\n");
    printf("  serial    : %d\n", ser[1]);

    if (ident.remote_ok) {
        printf("remote part:\n");
	printf("  hw_type   : %d, ", ident.remote.hw_type);
        if (ser[0]<sizeof(hwtypes)/sizeof(char*))
            printf("%s\n", hwtypes[ident.remote.hw_type]);
        else
            printf("(unknown)\n");
	printf("  hw_version: %d\n", ident.remote.hw_version);
	printf("  fw_type   : %d\n", ident.remote.fw_type);
	printf("  fw_version: %d\n", ident.remote.fw_version);
    } else {
    	printf("remote id not available\n");
    }
    return 0;
}
/*****************************************************************************/
#if 0
static int
read_ctrl(struct pathdescr *d, int offs, u_int32_t *val)
{
    struct sis1100_ctrl_reg reg;

    reg.offset=offs;
    if (ioctl(d->rp, SIS1100_CTRL_READ, &reg)<0) {
        printf("CTRL_READ: %s\n", strerror(errno));
        return -1;
    } else if (reg.error) {
        printf("CTRL_READ: error=0x%x\n", reg.error);
        return -1;
    }
    *val=reg.val;
    return 0;
}
/*****************************************************************************/
static int
write_ctrl(struct pathdescr *d, u_int32_t offs, u_int32_t val)
{
    struct sis1100_ctrl_reg reg;

    reg.offset=offs;
    reg.val=val;
    if (ioctl(d->rp, SIS1100_CTRL_WRITE, &reg)<0) {
        printf("CTRL_WRITE: %s\n", strerror(errno));
        return -1;
    } else if (reg.error) {
        printf("CTRL_WRITE: error=0x%x\n", reg.error);
        return -1;
    }
    return 0;
}
#endif
/*****************************************************************************/
static int
xpread(int fd, void *buf, size_t count, off_t offset)
{
    ssize_t res;

    res=pread(fd, buf, count, offset);
    if (res==count) {
        return 0;
    } else {
        u_int32_t prot_error=0x5a5a5a5a;
        ioctl(fd, SIS1100_LAST_ERROR, &prot_error);
        printf("read: res=%lld instead of %llu, prot_error=%x errno=%s\n",
                (long long)res, (unsigned long long)count,
                prot_error, strerror(errno));
        return -1;
    }
}
/*****************************************************************************/
static int
xpwrite(int fd, const void *buf, size_t count, off_t offset)
{
    ssize_t res;

    res=pwrite(fd, buf, count, offset);
    if (res==count) {
        return 0;
    } else {
        u_int32_t prot_error=0x5a5a5a5a;
        ioctl(fd, SIS1100_LAST_ERROR, &prot_error);
        printf("write: res=%lld instead of %llu, prot_error=%x errno=%s\n",
                (long long)res, (unsigned long long)count,
                prot_error, strerror(errno));
        return -1;
    }
}
/*****************************************************************************/
static int
do_cmap(struct pathdescr *d)
{
    d->cmap=mmap(0, 4096, PROT_READ|PROT_WRITE, MAP_SHARED,
            d->cp, 0);
    if (d->cmap==MAP_FAILED) {
        printf("mmap 0x%llx byte: %s\n",
                (unsigned long long)d->mapsize, strerror(errno));
        return -1;
    }
    return 0;
}
/*****************************************************************************/
static int
do_mmap(struct pathdescr *d)
{
/*
 * This only correct if start is a multiple of 0x400000!
 */
    u_int32_t descr[4]={0xff010800, single_am, start, 0};
    u_int32_t mapsize;
    int i, offs;

    if (d->map)
        munmap(d->map, d->mapsize);

    if (ioctl(d->rp, SIS1100_MAPSIZE, &mapsize)<0) {
        printf("ioctl(SIS1100_MAPSIZE(vme): %s\n", strerror(errno));
        return -1;
    }
    if (mapsize<numwords*8) {
        printf("mmap needs %u bytes but only %u are available\n",
                numwords*8, mapsize);
        return -1;
    }

    d->mapsize=numwords*8;

#if 0
    printf("mapsize=0x%x p=%d start=0x%x\n", mapsize, d->rp, start);
#endif

    /* fill the descriptor */
    for (i=0, offs=0x400; i<4; i++, offs+=4) {
        struct sis1100_ctrl_reg reg;
        reg.offset=offs;
        reg.val=descr[i];
        if (ioctl(d->cp, SIS1100_CTRL_WRITE, &reg)<0) {
            printf("ioctl SIS1100_CTRL_WRITE: %s\n", strerror(errno));
            return -1;
        }
    }

    d->map=mmap(0, d->mapsize, PROT_READ|PROT_WRITE, MAP_SHARED,
            d->rp, 0);
    if (d->map==MAP_FAILED) {
        printf("mmap 0x%llx byte: %s\n",
                (unsigned long long)d->mapsize, strerror(errno));
        return -1;
    }

#if 0
    printf("0x%llx bytes mapped at addr %p\n",
            (unsigned long long)d->mapsize, d->map);
#endif

    return 0;
}
/*****************************************************************************/
static int
prepare_settings(struct pathdescr *d)
{
#if 0
    u_int32_t sc;
    int swap=0;

    if (read_ctrl(d, 0x100, &sc)<0) {
        printf("error reading OPT-VME-Master Status/Control register\n");
        return -1;
    }
    printf("system controller is %sabled\n", sc&0x10000?"en":"DIS");
    if (controller>=0) {
        if (write_ctrl(d, 0x100, 1<<(controller?0:16))<0) {
            printf("error writing OPT-VME-Master Status/Control register\n");
            return -1;
        }
        if (read_ctrl(d, 0x100, &sc)<0) {
            printf("error reading OPT-VME-Master Status/Control register\n");
            return -1;
        }
        printf("system controller is now %sabled\n", sc&0x10000?"en":"dis");
    }
    if (ioctl(d->rp, SIS1100_SWAP, &swap)<0) {
        printf("SIS1100_SWAP: %s\n", strerror(errno));
        return -1;
    }
    if (ioctl(d->rp, SIS1100_TESTFLAGS, &testflags)<0) {
        printf("SIS1100_TESTFLAGS: %s\n", strerror(errno));
        return -1;
    }
#endif

    return 0;
}
/*****************************************************************************/
static int
set_vmespace(struct pathdescr *d, int datasize, int am, int mindmalen,
    int fifomode, int swap)
{
    struct vmespace vspace;

    vspace.datasize=datasize;
    vspace.am=am;
    vspace.swap = swap;
    vspace.mindmalen=mindmalen;
    vspace.mapit = 0;
#if 0
    printf("vmespace: p=%d size=%d am=%x mindmalen=%d fifo=%d\n",
        p, datasize, am, mindmalen, fifomode);
#endif
    if (ioctl(d->rp, SETVMESPACE, &vspace)<0) {
        printf("SETVMESPACE: %s\n", strerror(errno));
        return -1;
    }
    if (ioctl(d->rp, SIS1100_FIFOMODE, &fifomode)<0) {
        printf("FIFOMODE: %s\n", strerror(errno));
        return -1;
    }
    return 0;
}
/*****************************************************************************/
static int
set_vmespace_norm(struct pathdescr *d)
{
    return set_vmespace(d, 4, 9, 0, 0, 0);
}
/*****************************************************************************/
static void
print_quest(struct quest *quest, const char* txt)
{
    printf("[%02x] %c size=%d type=%s",
        quest->sequence,
        quest->rw?'W':'R',
        quest->size,
        transtypes[quest->transtype]);
    if (shift) {
        printf(" cshift=%d vshift=%d",
            quest->cpushift,
            quest->vmeshift);
    }
    printf(" fifo=%d %s",
        quest->fifo,
        txt?txt:"");
    fflush(stdout);
}
/*****************************************************************************/
static double
calc_speed(struct timeval t0, struct timeval t1, int words, int size)
{
    double diff, time;
    diff=(double)(t1.tv_sec-t0.tv_sec)*1000000.+(double)(t1.tv_usec-t0.tv_usec);
    time=(diff*size)/(words*4);
    return time;
}
/*****************************************************************************/
static int
do_real_block_write_mmap(struct pathdescr *d, struct quest *quest)
{
#if 0
    quest->size
    quest->fifo
    quest->cpushift
    quest->vmeshift
#endif 
    struct timeval t0, t1;
    int i;

    u_int32_t sr, p_balance, prot_error=0, opt_csr;
    d->cmap->opt_csr    = opt_s_fifo_pff|opt_s_fifo_ff;
    d->cmap->sr         = irq_prot_end|irq_prot_l_err|sr_prot_err;
    d->cmap->p_balance  = 0;
    prot_error=d->cmap->prot_error;

    gettimeofday(&t0, 0);
    switch (quest->size) {
    case 4: {
            u_int32_t *cpuaddr=block_w;
            volatile u_int32_t *vmeaddr=d->map;
            for (i=0; i<numwords; i++) {
                vmeaddr[i]=cpuaddr[i];
            }
        }
        break;
    case 2: {
            u_int16_t *cpuaddr=(u_int16_t*)block_w;
            volatile u_int16_t *vmeaddr=d->map;
            for (i=0; i<2*numwords; i++) {
                vmeaddr[i]=cpuaddr[i];
            }
        }
        break;
    case 1: {
            u_int8_t *cpuaddr=(u_int8_t*)block_w;
            volatile u_int8_t *vmeaddr=d->map;
            for (i=0; i<4*numwords; i++) {
                vmeaddr[i]=cpuaddr[i];
            }
        }
        break;
    }

    opt_csr    = d->cmap->opt_csr;
    sr         = d->cmap->sr;
    p_balance  = d->cmap->p_balance;
    prot_error = d->cmap->prot_error;
    gettimeofday(&t1, 0);
    quest->time=calc_speed(t0, t1, numwords, quest->size);

#if 0
    if (1||(opt_csr & opt_s_fifo_pff) ||
        (sr & (irq_prot_end|irq_prot_l_err|sr_prot_err))) {
        printf(" %08x %08x %08x %08x", sr, p_balance, prot_error, opt_csr);
        /*if (prot_error)
            return -1;*/
    }
#endif

    return 0;
}
/*****************************************************************************/
static int
do_real_block_write_driver(struct pathdescr *d, struct quest *quest)
{
    char* cpuaddr;
    u_int32_t vmeaddr;
    struct timeval t0, t1;
    int dmalen[2], pipelen[2];

    set_vmespace(d, quest->size, /*quest->fifo?single_am:*/block_am,
            0, quest->fifo, do_swap);
    switch (quest->transtype) {
    case trans_block_single:
        dmalen[0]=0;
        dmalen[1]=0;
        pipelen[0]=0;
        pipelen[1]=0;
        break;
    case trans_block_dma:
        dmalen[0]=1;
        dmalen[1]=1;
        pipelen[0]=0;
        pipelen[1]=0;
        break;
    case trans_block_pipe:
        dmalen[0]=0;
        dmalen[1]=0;
        pipelen[0]=1;
        pipelen[1]=1;
        break;
    case trans_mmap:
    case trans_pipe:
    case trans_wpipe:
    default:
        printf("illegal tranaction type %d\n", quest->transtype);
        return -1;
    };
    ioctl(d->rp, SIS1100_MINDMALEN, dmalen);
    ioctl(d->rp, SIS1100_MINPIPELEN, pipelen);

    cpuaddr=((char*)block_w)+quest->size*quest->cpushift;
    vmeaddr=start+quest->size*quest->vmeshift;
    gettimeofday(&t0, 0);
    if (xpwrite(d->rp, cpuaddr, 4*numwords, vmeaddr)<0)
        return -1;
    gettimeofday(&t1, 0);
    quest->time=calc_speed(t0, t1, numwords, quest->size);

    return 0;
}
/*****************************************************************************/
static int
do_real_block_write_pipe(struct pathdescr *d, struct quest *quest)
{
    struct sis1100_writepipe pipe;
    char* cpuaddr=((char*)block_w)+quest->size*quest->cpushift;
    u_int32_t vmeaddr=start+quest->size*quest->vmeshift;
    u_int32_t *pipedata;
    struct timeval t0, t1;
    int i, res=0;

    pipedata=malloc(2*sizeof(u_int32_t));
    for (i=0; i<numwords; i++) {
        pipedata[2*i]=vmeaddr+quest->size*i;
        pipedata[2*i+1]=cpuaddr[quest->size*i];
    }

    pipe.num=numwords;
    pipe.am=quest->fifo?single_am:block_am;
    pipe.data=pipedata;
    pipe.error=0;

    gettimeofday(&t0, 0);
    res=ioctl(d->rp, SIS1100_WRITE_PIPE, &pipe);
    gettimeofday(&t1, 0);
    if (res<0)
        goto error;
    quest->time=calc_speed(t0, t1, numwords, quest->size);

error:
    free(pipedata);
    return res;
}
/*****************************************************************************/
static int
do_block_write(struct pathdescr *d, struct quest *quest)
{
    u_int32_t val;
    int res;

    /* write sequence marker and fill VME memory with known garbage */
    set_vmespace_norm(d);
    val=0xffff0000+quest->sequence;
    if (xpwrite(d->rp, &val, 4, start)<0)
        return -1;
    if (check) {
        if (xpwrite(d->rp, blockXX, 8*numwords, start)<0)
            return -1;
    }

    /* do the real write */
    switch (quest->transtype) {
    case trans_block_single:
    case trans_block_dma:
    case trans_block_pipe:
        res=do_real_block_write_driver(d, quest);
        break;
    case trans_mmap:
        res=do_real_block_write_mmap(d, quest);
        break;
    case trans_pipe:
        res=do_real_block_write_pipe(d, quest);
        break;
    case trans_wpipe:
        res=do_real_block_write_wpipe(d, quest);
        break;
    default:
        printf("illegal tranaction type %d\n", quest->transtype);
        return -1;
    };

    if (res<0)
        return res;

    if (check) {
        /* fill readbuffer with known garbage */
        bcopy(blockXX, block_r, 8*numwords);
        /* read the data back */
        set_vmespace_norm(d);
        if (xpread(d->rp, block_r, 8*numwords, start)<0)
            return -1;
    }

    return 0;
}
/*****************************************************************************/
static void
simulate_block_write(struct quest *quest)
{
    int i;

    switch (quest->size) {
    case 4:
        /* fill memory with known garbage */
        bcopy(blockXX, blocksr, 8*numwords);
        if (quest->fifo) {
            if (quest->rw)
                blocksr[0]=block_w[numwords-1];
            else
                for (i=0; i<numwords; i++)
                    blocksr[i]=block_w[0];
        } else {
            for (i=0; i<numwords; i++)
                blocksr[i]=block_w[i];
        }
        break;
    case 2: {
            u_int16_t *src=(u_int16_t*)block_w, *dst=(u_int16_t*)blocksr;
            int cshift=quest->cpushift, vshift=quest->vmeshift;

            bcopy(blockXX, blocksr, 8*numwords);
            if (quest->fifo) {
                if (quest->rw) {
                    dst[vshift^1]=src[numwords*2-1+cshift];
                } else {
                    for (i=0; i<numwords*2; i++)
                        dst[i+cshift]=src[vshift^1];
                }
            } else {
                if (quest->rw) {
                    for (i=0; i<numwords*2; i++)
                        dst[(i+vshift)^1]=src[i+cshift];
                } else {
                    for (i=0; i<numwords*2; i++)
                        dst[i+cshift]=src[(i+vshift)^1];
                }
            }
        }
        break;
    case 1: {
            u_int8_t *src=(u_int8_t*)block_w, *dst=(u_int8_t*)blocksr;
            int cshift=quest->cpushift, vshift=quest->vmeshift;

            bcopy(blockXX, blocksr, 8*numwords);
            if (quest->fifo) {
                if (quest->rw) {
                    dst[vshift^3]=src[numwords*4-1+cshift];
                } else {
                    for (i=0; i<numwords*4; i++)
                        dst[i+cshift]=src[vshift^3];
                }
            } else {
                if (quest->rw) {
                    for (i=0; i<numwords*4; i++)
                        dst[(i+vshift)^3]=src[i+cshift];
                } else {
                    for (i=0; i<numwords*4; i++)
                        dst[i+cshift]=src[(i+vshift)^3];
                }
            }
        }
        break;
    }
}
/*****************************************************************************/
static int
do_real_block_read_mmap(struct pathdescr *d, struct quest *quest)
{
#if 0
    quest->size
    quest->fifo
    quest->cpushift
    quest->vmeshift
#endif 
    struct timeval t0, t1;
    int i;

    gettimeofday(&t0, 0);
    switch (quest->size) {
    case 4: {
            u_int32_t *cpuaddr=block_r;
            volatile u_int32_t *vmeaddr=d->map;
            for (i=0; i<numwords; i++) {
                cpuaddr[i]=vmeaddr[i];
            }
        }
        break;
    case 2: {
            u_int16_t *cpuaddr=(u_int16_t*)block_r;
            volatile u_int16_t *vmeaddr=d->map;
            for (i=0; i<numwords*2; i++) {
                cpuaddr[i]=vmeaddr[i];
            }
        }
        break;
    case 1: {
            u_int8_t *cpuaddr=(u_int8_t*)block_r;
            volatile u_int8_t *vmeaddr=d->map;
            for (i=0; i<numwords*4; i++) {
                cpuaddr[i]=vmeaddr[i];
            }
        }
        break;
    }
    gettimeofday(&t1, 0);
    quest->time=calc_speed(t0, t1, numwords, quest->size);

    return 0;
}
/*****************************************************************************/
static int
do_real_block_read_driver(struct pathdescr *d, struct quest *quest)
{
    char* cpuaddr;
    u_int32_t vmeaddr;
    struct timeval t0, t1;

    set_vmespace(d, quest->size, block_am, quest->dma?1:0, quest->fifo,
            do_swap);
    cpuaddr=((char*)block_r)+quest->size*quest->cpushift;
    vmeaddr=start+quest->size*quest->vmeshift;
    gettimeofday(&t0, 0);
    if (xpread(d->rp, cpuaddr, 4*numwords, vmeaddr)<0)
        return -1;
    gettimeofday(&t1, 0);
    quest->time=calc_speed(t0, t1, numwords, quest->size);

    return 0;
}
/*****************************************************************************/
static int
do_block_read(struct pathdescr *d, struct quest *quest)
{
    u_int32_t val;
    int res;

    /* write sequence marker and fill VME memory with known data */
    set_vmespace_norm(d);
    val=0xffff0000+quest->sequence;
    if (xpwrite(d->rp, &val, 4, start)<0)
        return -1;
    if (check) {
        /* fill VME memory with known data */
        if (xpwrite(d->rp, block_w, 8*numwords, start)<0)
            return -1;
        /* fill readbuffer with known garbage */
        bcopy(blockXX, block_r, 8*numwords);
    }

    /* do the real read */
    if (quest->mmap)
        res=do_real_block_read_mmap(d, quest);
    else
        res=do_real_block_read_driver(d, quest);
    if (res<0)
        return res;

    return 0;
}
/*****************************************************************************/
static int
do_check(struct quest *quest)
{
    int i, failed=0;
    /*int dumped_words;*/

    if (quest->rw)
        simulate_block_write(quest);
    else
#if 0
        simulate_block_read(quest);
#endif
        simulate_block_write(quest);

    for (i=0; i<2*numwords; i++) {
        if (blocksr[i]!=block_r[i]) {
            printf("[%d] %08x %08x\n", i, blocksr[i], block_r[i]);
            failed++;
        }
    }

    if (failed) {
        int num=2*numwords;
        if (num>maxdumpwords)
            num=maxdumpwords;
        printf("mismatch in %d word%s\n", failed, failed==1?"":"s");
        for (i=0; i<num; i++) {
            if (printall || blocksr[i]!=block_r[i])
                printf("[%d] %08x --> %08x%s\n", i, blocksr[i], block_r[i],
                        blocksr[i]==block_r[i]?"":" !");
        }
        if (quest->size==2) {
            u_int16_t *blocksr16=( u_int16_t*)blocksr;
            u_int16_t *block_r16=( u_int16_t*)block_r;
            u_int16_t *block_w16=( u_int16_t*)block_w;
            num*=2;
            if (num>maxdumpwords) num=maxdumpwords;
            for (i=0; i<num; i++) {
                if (printall || blocksr16[i]!=block_r16[i])
                    printf("[%02d] %04x --> %04x  %04x%s\n", i,
                            blocksr16[i], block_r16[i],
                            block_w16[i],
                            blocksr16[i]==block_r16[i]?"":" !");
            }
        }
        if (quest->size==1) {
            u_int8_t *blocksr8=( u_int8_t*)blocksr;
            u_int8_t *block_r8=( u_int8_t*)block_r;
            u_int8_t *block_w8=( u_int8_t*)block_w;
            num*=4;
            if (num>maxdumpwords) num=maxdumpwords;
            for (i=0; i<num; i++) {
                if (printall || blocksr8[i]!=block_r8[i])
                    printf("[%02d] %02x --> %02x  %02x%s\n", i,
                            blocksr8[i], block_r8[i],
                            block_w8[i],
                            blocksr8[i]==block_r8[i]?"":" !");
            }
        }
    }

    return failed?-1:0;
}
/*****************************************************************************/
static int
do_block(struct pathdescr *d, struct quest *quest)
{
    int res;

    if (quest->rw)
        res=do_block_write(d, quest);
    else
        res=do_block_read(d, quest);
    if (!res)
        printf("  %6.3f us/word\n", quest->time);
    else
        printf("\n");

    return res;
}
/*****************************************************************************/
static int
quest_enabled(struct quest *quest)
{
    if (!shift && (quest->vmeshift || quest->cpushift))
        return 0;

    /* impossible combination */
    if (quest->dma && quest->mmap)
        return -1;

    /* depends neither on harware nor driver --> useless to test */
    if (quest->mmap && (quest->fifo || quest->cpushift || quest->vmeshift))
        return -1;

#if 1 /* with compatible slaves only */
    if (quest->dma && quest->fifo)
        return 0;
#endif

#if 0
    if (quest->size!=2 || !quest->rw || !quest->dma || quest->fifo)
        return 0;
#endif
#if 0
    if (quest->size==4)
        return 0;
#endif
#if 0
    if (!quest->rw)
        return 0;
#endif
#if 0
    if (!quest->dma)
        return 0;
#endif
#if 0
    if (quest->dma && quest->size==1)
        return 0;
#endif
#if 0
    if (quest->fifo)
        return 0;
#endif
#if 0
    if (quest->mmap)
        return 0;
#endif
#if 0
    if (quest->rw && quest->size<4)
        return 0;
#endif
#if 0
    if (!shift && quest->vmeshift)
        return 0;
#endif
#if 0
    if (!shift && quest->cpushift)
        return 0;
#endif

    return 1;
}
/*****************************************************************************/
static int
do_quest(struct pathdescr *d, struct quest *quest)
{
    u_int32_t testflags=0;
    int ena;

    ena=quest_enabled(quest);

    if (quest_id<0) {
        print_quest(quest, 0);
        if (ena<0) {
            printf(" impossible\n");
            return 0;
        } else if (ena==0) {
            printf(" disabled\n");
            return 0;
        }
    } else if (quest_id==quest->sequence) {
        print_quest(quest, 0);
        if (ena<0) {
            printf(" impossible\n");
            return 0;
        }
    } else {
        return 0;
    }

#if 0
    if (quest->size==2 && quest->dma)
        testflags|=1;
#endif

    if (ioctl(d->rp, SIS1100_TESTFLAGS, &testflags)<0) {
        printf("ioctl(TESTFLAGS): %s\n", strerror(errno));
        return -1;    
    }

    if (do_block(d, quest)<0)
        return -1;
    if (check) {
        if (do_check(quest)<0)
            return -1;
    }
    return 0;
}
/*****************************************************************************/
static int
do_tests(struct pathdescr *d)
{
    struct quest quest;
    int wordsize;
    int cpushift;
    int vmeshift;
    int dma;
    int fifo;
    int mmap;
    int rw;
    int sequence=0;

    for (wordsize=4; wordsize>0; wordsize>>=1) {
        for (cpushift=0; cpushift<=4-wordsize; cpushift++) {
            for (vmeshift=0; vmeshift<=4-wordsize; vmeshift++) {
                for (transtype=trans_start+1; transtype<trans_end; transtype++) {
                    for (fifo=0; fifo<=1; fifo++) {
                        for (rw=0; rw<=1; rw++) {
                            quest.size=wordsize;
                            quest.cpushift=cpushift;
                            quest.vmeshift=vmeshift;
                            quest.transtype=transtype;
                            quest.fifo=fifo;
                            quest.rw=rw;
                            quest.sequence=sequence;

                            if (do_quest(d, &quest)<0)
                                return -1;

                            sequence++;
                        }
                    }
                }
            }
        }
    }
    return 0;
}
/*****************************************************************************/
int
main(int argc, char* argv[])
{
    struct pathdescr descr;
    int l, res;

    if (readargs(argc, argv)<0)
        return 1;

    if (do_open(&descr, dev)<0)
        return 2;

    if (do_ident(&descr)<0)
        return 3;

    if (do_cmap(&descr)<0)
        return 4;

    if (prepare_settings(&descr)<0)
        return 4;


    do {
        if (do_mmap(&descr)<0)
            break;
        if (initblocks()<0) {
            printf("initblocks failed\n");
            break;
        }
        for (l=0; l<loops || !loops; l++) {
            printf("loop %d num=%d\n", l, numwords);
            if ((res=do_tests(&descr))<0)
                break;
        }
        numwords+=increment;
    } while ((!res) && (increment>0));

    munmap(descr.map, descr.mapsize);
    munmap(descr.cmap, 4096);
    close(descr.cp);
    close(descr.rp);
    return 0;
}
/*****************************************************************************/
/*****************************************************************************/
